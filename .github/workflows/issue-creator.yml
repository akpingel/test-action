name: Test Callable Workflow
on: push

jobs:
  test-job2:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Test Step
        run: echo "My environment is ${{ github.event.inputs.environment }}"
  
  always-fail:
    runs-on: ubuntu-latest
    steps:
      - name: Fail
        run: exit 1

  test-job:
    needs: always-fail
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Test Step
        run: echo "My environment is ${{ github.event.inputs.environment }}"

  generate-job-list:
    needs: [test-job2, always-fail, test-job]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    outputs:
      job-list: ${{ steps.set-job-list.outputs.job-list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: Generate job list
        id: set-job-list
        run: |
          JOB_LIST="hello always-fail test-job"
          echo "::set-output name=job-list::$JOB_LIST"
          echo $JOB_LIST > job-list.txt

  check-for-failure:
    needs: [generate-job-list]
    runs-on: ubuntu-latest
    if: always() && ${{ generate-job-list.outputs.job-list }} != ""
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # - name: Install jq
    #   run: sudo apt-get install -y jq

    # - name: Print needs
    #   run: echo "${{ toJson(needs) }}"

    # - name: Find Failure
    #   id: failed-job
    #   run: |
    #     echo "Finding failed job"
    #     if [[ '${{ needs.always-fail.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::always-fail"
    #     elif [[ '${{ needs.test-job.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::test-job"
    #     elif [[ '${{ needs.test-job2.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::test-job"
    #     fi
    #   shell: bash
    
    # - name: Find Failure
    #   id: failed-job
    #   run: |
    #     echo "Finding failed job"
    #     for job in always-fail, test-job, test-job2; do
    #       if [[ ${{ needs[job].result }} == 'failure' ]]; then
    #         echo "::set-output name=failed-job::$job"
    #         break
    #       fi
    #     done
          
    - name: Print failed-job
      run: echo "${{ steps.failed-job.outputs.failed-job }}"

    - name: Fetch CODEOWNERS
      if: steps.failed-job.outputs.failed-job != ''
      id: codeowners
      run: |
        CODEOWNERS=$(awk '!/CODEOWNERS/ {print $2}' ./CODEOWNERS)
        echo "::set-output name=owners::$CODEOWNERS"

    # - name: My step
    #   if: steps.failed-job.outputs.failed-job != ''
    #   run: echo ${{ secrets.MY_SECRET }}

    - name: Create issue on failure
      uses: actions/github-script@v5
      if: steps.failed-job.outputs.failed-job != null
      with:
        github-token: ${{secrets.alyssa_secret}}
        script: |
          const runId = context.runId;
          const failedJobs = "${{ needs.generate-job-list.outputs.job-list }}".split(' ');

          const issueBody = `Main Pipeline scheduled run failed ${failedJobs}. See [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}) for details.`;
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Main Pipeline Scheduled Run Failed',
            body: issueBody,
          });
