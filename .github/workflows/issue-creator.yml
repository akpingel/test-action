name: Test Callable Workflow
on: push

jobs:
  test-job2:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Test Step
        run: echo "Hello"
  
  always-fail:
    runs-on: ubuntu-latest
    steps:
      - name: Fail
        run: echo "HELLO"

  test-job:
    needs: always-fail
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Test Step
        run: echo "My environment is ${{ github.event.inputs.environment }}"

  # generate-job-list:
  #   needs: [test-job2, always-fail, test-job]
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && contains(needs.*.result, 'failure') }}
  #   outputs:
  #     job-list: ${{ steps.set-job-list.outputs.job-list }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  
  #     - name: Generate job list
  #       id: set-job-list
  #       run: |
  #         JOB_LIST="hello always-fail test-job"
  #         # echo "::set-output name=job-list::$JOB_LIST"
  #         echo "job-list=$JOB_LIST" >> $GITHUB_OUTPUT

  
  check-for-failure:
    runs-on: ubuntu-latest
    needs: [test-job2, always-fail, test-job]
    if: always() && contains(needs.*.result, 'failure')
    steps:
    - uses: actions/checkout@v2

    # - name: Install jq
    #   run: sudo apt-get install -y jq

    # - name: Print needs
    #   run: echo "${{ toJson(needs) }}"

    # - name: Find Failure
    #   id: failed-job
    #   run: |
    #     echo "Finding failed job"
    #     if [[ '${{ needs.always-fail.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::always-fail"
    #     elif [[ '${{ needs.test-job.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::test-job"
    #     elif [[ '${{ needs.test-job2.result }}' == 'failure' ]]; then
    #       echo "::set-output name=failed-job::test-job"
    #     fi
    #   shell: bash
    
    # - name: Find Failure
    #   id: failed-job
    #   run: |
    #     echo "Finding failed job"
    #     for job in always-fail, test-job, test-job2; do
    #       if [[ ${{ needs[job].result }} == 'failure' ]]; then
    #         echo "::set-output name=failed-job::$job"
    #         break
    #       fi
    #     done
          
    # - name: Print failed-job
    #   run: echo "${{ steps.failed-job.outputs.failed-job }}"

    # - name: Fetch CODEOWNERS
    #   if: steps.failed-job.outputs.failed-job != ''
    #   id: codeowners
    #   run: |
    #     CODEOWNERS=$(awk '!/CODEOWNERS/ {print $2}' ./CODEOWNERS)
    #     echo "::set-output name=owners::$CODEOWNERS"

    # - name: My step
    #   if: steps.failed-job.outputs.failed-job != ''
    #   run: echo ${{ secrets.MY_SECRET }}
    # - name: Check for failure
    #   id: check-failure
    #   run: |
    #       JOB_LIST=$(cat job-list.txt)
    #       FAILED_JOBS=""
    #       for job in $JOB_LIST; do
    #           if [ -f "job-$job-list.txt" ]; then
    #               echo "Job $job failed"
    #               FAILED_JOBS="$FAILED_JOBS $job"
    #           fi
    #       done
    # #       echo "::set-output name=failed-jobs::$FAILED_JOBS"
    # - name: List of Jobs
    #   id: job-list
    #   run: echo "::set-output name=job-list::hello always-fail test-job"
      
    # - name: Check for failure
    #   id: check-failure
    #   run: |
    #     JOB_LIST="${{ needs.generate-job-list.outputs.job-list }}"
    #     FAILED_JOBS=""
    #     for job in $JOB_LIST; do
    #         JOB_STATUS=$(curl -H "Accept: application/vnd.github.v3+json" \
    #           "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs" \
    #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" | jq -r '.jobs[] | select(.name=="'"$job"'") | .conclusion')
    #         if [ "$JOB_STATUS" == "failure" ]; then
    #             echo "Job $job failed"
    #             FAILED_JOBS="$FAILED_JOBS $job"
    #         fi
    #     done
    #     echo "failed-jobs=${FAILED_JOBS# }" >> $GITHUB_OUTPUT

    # - name: Print failed-job
    #   run: echo "${{ steps.check-failure.outputs.failed-jobs }}"

    # - name: Find Failure
    #   id: failed-job
    #   run: |
    #     echo "Finding failed job"
    #     word=${{ toJson(needs) }}
    #     jobs=$(echo $word | jq -r 'keys[]')

    #     for job in $jobs
    #     do
    #       result=$(echo $word | jq -r --arg job $job '.[$job].result')
    #       echo "Result of $job: $result"
    #     done
    - name: Find failure
      uses: actions/github-script@v5
      with:
        script: |
          const needs = ${{ toJson(needs) }};
          let failedJob = '';
          for (const job in needs) {
            if (needs[job].result === 'failure') {
              failedJob = job;
              break;
            }
          }
          console.log(`Failed job: ${failedJob}`);
          return failedJob
        
        
    - name: Create issue on failure
      uses: actions/github-script@v5
      with:
        github-token: ${{secrets.alyssa_secret}}
        script: |

          // find failed job
          const needs = ${{ toJson(needs) }};
          const { owner, repo } = context.repo;
          const runId = context.runId;
          const issueTitle = 'Main Pipeline Run Failed';
          const failedJobs = Object.keys(needs).filter(job => needs[job].result === 'failure');
          
          console.log(`Failed jobs: ${failedJobs.join(', ')}`);

          const issueBody = `Main Pipeline run failed on job(s): ${failedJobs.join(', ')}. See [workflow run](https://github.com/${owner}/${repo}/actions/runs/${runId}) for details.`;

          const issues = await github.rest.issues.listForRepo({ owner, repo, state: 'open', sort: 'created', direction: 'desc' });
          const existingIssue = issues.data.find(issue => issue.title === issueTitle);

          if (existingIssue) {
            await github.rest.issues.createComment({ owner, repo, issue_number: existingIssue.number, body: issueBody });
          } else {
            await github.rest.issues.create({ owner, repo, title: issueTitle, body: issueBody });
          }
